// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "wallet/internal/entity"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"

	uuid "github.com/google/uuid"
)

// WalletRepo is an autogenerated mock type for the walletRepo type
type WalletRepo struct {
	mock.Mock
}

// GetByUUID provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletRepo) GetByUUID(_a0 context.Context, _a1 pgx.Tx, _a2 uuid.UUID) (*entity.Wallet, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 *entity.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID) (*entity.Wallet, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, uuid.UUID) *entity.Wallet); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletRepo) Insert(_a0 context.Context, _a1 pgx.Tx, _a2 *entity.Wallet) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, *entity.Wallet) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *WalletRepo) Update(_a0 context.Context, _a1 pgx.Tx, _a2 *entity.Wallet) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, *entity.Wallet) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletRepo creates a new instance of WalletRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepo {
	mock := &WalletRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
